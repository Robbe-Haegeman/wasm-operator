// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	testresourcev1 "github.com/amurant/ring-go-operator/pkg/apis/testresource/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeTestResources implements TestResourceInterface
type FakeTestResources struct {
	Fake *FakeAmurantV1
	ns   string
}

var testresourcesResource = schema.GroupVersionResource{Group: "amurant.io", Version: "v1", Resource: "testresources"}

var testresourcesKind = schema.GroupVersionKind{Group: "amurant.io", Version: "v1", Kind: "TestResource"}

// Get takes name of the testResource, and returns the corresponding testResource object, and an error if there is any.
func (c *FakeTestResources) Get(ctx context.Context, name string, options v1.GetOptions) (result *testresourcev1.TestResource, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(testresourcesResource, c.ns, name), &testresourcev1.TestResource{})

	if obj == nil {
		return nil, err
	}
	return obj.(*testresourcev1.TestResource), err
}

// List takes label and field selectors, and returns the list of TestResources that match those selectors.
func (c *FakeTestResources) List(ctx context.Context, opts v1.ListOptions) (result *testresourcev1.TestResourceList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(testresourcesResource, testresourcesKind, c.ns, opts), &testresourcev1.TestResourceList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &testresourcev1.TestResourceList{ListMeta: obj.(*testresourcev1.TestResourceList).ListMeta}
	for _, item := range obj.(*testresourcev1.TestResourceList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested testResources.
func (c *FakeTestResources) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(testresourcesResource, c.ns, opts))

}

// Create takes the representation of a testResource and creates it. Returns the server's representation of the testResource, and an error, if there is any.
func (c *FakeTestResources) Create(ctx context.Context, testResource *testresourcev1.TestResource, opts v1.CreateOptions) (result *testresourcev1.TestResource, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(testresourcesResource, c.ns, testResource), &testresourcev1.TestResource{})

	if obj == nil {
		return nil, err
	}
	return obj.(*testresourcev1.TestResource), err
}

// Update takes the representation of a testResource and updates it. Returns the server's representation of the testResource, and an error, if there is any.
func (c *FakeTestResources) Update(ctx context.Context, testResource *testresourcev1.TestResource, opts v1.UpdateOptions) (result *testresourcev1.TestResource, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(testresourcesResource, c.ns, testResource), &testresourcev1.TestResource{})

	if obj == nil {
		return nil, err
	}
	return obj.(*testresourcev1.TestResource), err
}

// Delete takes name of the testResource and deletes it. Returns an error if one occurs.
func (c *FakeTestResources) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(testresourcesResource, c.ns, name, opts), &testresourcev1.TestResource{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeTestResources) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(testresourcesResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &testresourcev1.TestResourceList{})
	return err
}

// Patch applies the patch and returns the patched testResource.
func (c *FakeTestResources) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *testresourcev1.TestResource, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(testresourcesResource, c.ns, name, pt, data, subresources...), &testresourcev1.TestResource{})

	if obj == nil {
		return nil, err
	}
	return obj.(*testresourcev1.TestResource), err
}
